/*
 * Copyright (c) 2015 by David Hardy. Licensed under the Apache License, Version 2.0.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'

Properties props = new Properties()
try {
    props.load(file('private.properties').newDataInputStream())
} catch (Exception ex) {
}

android {
    compileSdkVersion _compileSdkVersion
    buildToolsVersion _buildToolsVersion

    defaultConfig {
        applicationId "nl.endran.babynames"
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName "0.1.0 (${getDetails()})"
    }



    signingConfigs {
        release {
            storeFile project.rootProject.file('keystore.jks')
            storePassword props.getProperty("storePassword")
            keyAlias props.getProperty("keyAlias")
            keyPassword props.getProperty("keyPassword")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:${appCompatVersion}"
    compile "com.android.support:design:${appCompatVersion}"


    compile "com.google.code.gson:gson:${gsonVersion}"

    compile("com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}@aar") {
        transitive = true;
    }

    compile "com.google.dagger:dagger:${daggerVersion}"
    apt "com.google.dagger:dagger-compiler:${daggerVersion}"
    provided "org.glassfish:javax.annotation:${javaxAnnotationVersion}"

    compile("de.psdev.licensesdialog:licensesdialog:${licenseDialogVersion}") {
        exclude module: 'support-v4'
    }

    debugCompile "com.facebook.stetho:stetho:${stethoVersion}"
    debugCompile "com.facebook.stetho:stetho-urlconnection:${stethoVersion}"
    compile "com.jakewharton.timber:timber:${timberVersion}"
//    debugCompile "com.facebook.stetho:stetho-timber:${stethoVersion}"

    compile 'xyz.danoz:recyclerviewfastscroller:0.1.3'

    compile "io.reactivex:rxjava:${rxJavaVersion}"
    compile "io.reactivex:rxkotlin:${rxKotlinVersion}"
    compile "io.reactivex:rxandroid:${rxAndroidVersion}"
    compile "com.jakewharton.rxbinding:rxbinding-kotlin:${rxBindingVersion}"
    compile "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:${rxBindingVersion}"
    compile "com.f2prateek.rx.preferences:rx-preferences:${rxPreferencesVersion}"
    compile "com.trello:rxlifecycle:${rxlifecycleVersion}"
    compile "com.trello:rxlifecycle-components:${rxlifecycleVersion}"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testCompile "junit:junit:${jUnitVersion}"
    testCompile "org.mockito:mockito-all:${mockitoVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile("com.squareup.assertj:assertj-android:${androidAssertJVersion}"){
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}
buildscript {
    ext.kotlin_version = '1.0.0-beta-4584'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}

def getDetails() {
    def details = """git rev-parse --short HEAD""".execute().text.trim()
    def workingBranch = """git rev-parse --abbrev-ref HEAD""".execute().text.trim()
    return details + ' ' + workingBranch
}
